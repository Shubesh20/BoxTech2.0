clc
clf
hold on 
axis equal 
view(3)


surf([-7,7;-7,7],[7,7;-7,-7],[0,0;0,0],'CData',imread('concrete.jpg') ...
,'FaceColor','texturemap');

%Table
PlaceObject('tableBrown2.1x1.4x0.5m.ply',[0,0,0]);

%Emergency stop button
PlaceObject('emergencyStopButton.ply',[0.85,0.55,0.5]);

%Fire extinguisher
PlaceObject('fireExtinguisher.ply',[5.25,-5.25,0]);
PlaceObject('fireExtinguisher.ply',[-5.25,-5.25,0]);
PlaceObject('fireExtinguisher.ply',[5.25,5.25,0]);
PlaceObject('fireExtinguisher.ply',[-5.25,5.25,0]);

%Barrier
h_1 = PlaceObject('barrier1.5x0.2x1m.ply',[0,5,0]);
verts = [get(h_1,'Vertices'), ones(size(get(h_1,'Vertices'),1),1)];
verts(:,1) = verts(:,1) * 7;
set(h_1,'Vertices',verts(:,1:3))

h_2 = PlaceObject('barrier1.5x0.2x1m.ply',[0,-5,0]);
verts = [get(h_2,'Vertices'), ones(size(get(h_2,'Vertices'),1),1)];
verts(:,1) = verts(:,1) * 7;
set(h_2,'Vertices',verts(:,1:3))

h_3 = PlaceObject('barrier1.5x0.2x1m.ply',[0,0,0]);
verts = [get(h_3,'Vertices'), ones(size(get(h_3,'Vertices'),1),1)] * trotz(pi/2);
verts(:,2) = verts(:,2) * 7;
verts(:,1) = verts(:,1) + 5;
set(h_3,'Vertices',verts(:,1:3))

h_4 = PlaceObject('barrier1.5x0.2x1m.ply',[0,0,0]);
verts = [get(h_4,'Vertices'), ones(size(get(h_4,'Vertices'),1),1)] * trotz(pi/2);
verts(:,2) = verts(:,2) * 7;
verts(:,1) = verts(:,1) - 5;
set(h_4,'Vertices',verts(:,1:3))

%%
%Set up for UR3 Robot on rails
tablePos = transl(0.3,0,0.5)*trotx(pi/2)*troty(pi/2); % setting exact position of Linear UR3e
UR3e = RobotA1(tablePos);
UR3e.model.base = tablePos; 
UR3e.model.teach(UR3e.model.getpos);

% %% Make gripper **ATTEMPT**
% hold on
% % DH parameters link 1 and 2
% L1 = Link('d',0,'a',-0.04,'alpha',pi/2,'qlim',[0 0]); 
% L2 = Link('d',0,'a',0.07,'alpha',0,'offset',pi/2,'qlim',[0 deg2rad(25)]); 
% 
% % DH parameters link 3 and 4
% L3 = Link('d',0,'a',0.04,'alpha',-pi/2,'qlim',[0 0]); 
% L4 = Link('d',0,'a',0.07,'alpha',0, 'offset',-pi/2,'qlim',[0 deg2rad(25)]);
% 
% % Set up gripper arms 
% GripperL = SerialLink([L1 L2],'name','GripperL');
% GripperR = SerialLink([L3 L4],'name','GripperR');
% 
% InitialLoc = zeros(1,2);
% 
% GripperL.plot(InitialLoc)
% GripperR.plot(InitialLoc)
% 
% * Was not able to correctly figure out how to mount to end effector

%%
%Brick layout

hold on

% Define brick dimensions
brickLength = 0.1;  
brickWidth = 0.05;  
brickHeight = 0.05;

xPosInitial = 0.6;  % Starting x position of bricks on the table
yPosInitial = [0.2, 0, -0.2];  % Three rows for bricks

% Place the bricks on the table and store the positions
brickMap = [];

for i = 1:3
    for j = 1:3
        xPos = xPosInitial + (j - 1) * brickLength;  % X position for each brick (each iteration shifts x frame)
        yPos = yPosInitial(i);                       % Y position for each brick (specified above)
        zPos = 0.5;                                  % Z position for each brick (on the table)
        
        % Place the brick at the specified table position
        brickPlacement = PlaceObject('HalfSizedRedGreenBrick.ply', [xPos, yPos, zPos]);
        brickMap = [brickMap; brickPlacement];  % Storing positions
    end
end
%% Movement of bricks

%final position of bricks (wall)
xPosFinal = -0.8;  % Fixed x frame for wall
yPosFinal = [0.13, 0, -0.13];  % Y positions for stacked bricks (3 columns)
zPosFinal = [0.50, 0.525, 0.55];  % Z positions for stacking (3 rows)

% Define the number of steps for smooth movement, also meant to use
% for simultaneous movements
stepNum = 100;

% Iterate through the bricks and move them to wall position
for i = 1:3 
    for j = 1:3
        % Bricks initial position
        xStart = xPosInitial + (j - 1) * brickLength;
        yStart = yPosInitial(i);
        zStart = 0.5;  % Height on the table
        
        % Target position for this brick on the wall
        xEnd = xPosFinal;
        yEnd = yPosFinal(i);  % Stack along y-axis
        zEnd = zPosFinal(j);  % Stack along z-axis

        % Set the current end-effector target position (above the brick)
        pickupTr = transl([xStart, yStart, zStart + 0.1]) * troty(pi);  % Slightly above the brick, 
                                                                        % troty used to rotate the end effector to correct position

        % Inverse kinematics to find the joint configuration for picking up the brick
        pickupQ = UR3e.model.ikcon(pickupTr);  
        
        % Generate smooth joint trajectory for pickup
        currentQ = UR3e.model.getpos();  % Get current joint configuration
        pickupQTraj = jtraj(currentQ, pickupQ, stepNum);  % Interpolate between current and pickup position
        
        % Animate the robot to the pickup position
        for steps = 1:stepNum
            UR3e.model.animate(pickupQTraj(steps, :));
            pause(0.01);  % Small pause for smooth animation
        end

        % Lower the robot to the actual placement position
        putdownTr = transl([xEnd, yEnd, zEnd + 0.1]) * troty(pi);  % Lower to stack level
        putdownQ = UR3e.model.ikcon(putdownTr);  % inverse kinematics for lowering
        
        % Generate joint trajectory for lowering
        putdownQTraj = jtraj(pickupQ, putdownQ, stepNum);  % Interpolate between pick up and put down position
        
        %FAILED: Code to attempt simultaneous brick movement
        % oldBrickPos = [xStart, yStart, zStart]; % Set current brick position
        % vertices = get(brickMap((i-1)*3+j), 'Vertices');  % Get current vertices of the brick

        % Animate the robot to the lower position
        for steps = 1:stepNum
            UR3e.model.animate(putdownQTraj(steps, :));
            
            %FAILED: part of loop that should move the brick along with end effector
            % % Continue moving the brick to the final position
            % newBrickPos = transl(UR3e.model.fkine(q_traj_lower(steps, :)));  % Get current end-effector position
            % oldBrickPos = newBrickPos - oldBrickPos;  % Calculate brick translation
            % newVertices = vertices + oldBrickPos;  % Apply translation to the vertices
            % set(brickMap((i-1)*3+j), 'Vertices', newVertices);  % Update the brick's position
            
            pause(0.01);  % Small pause for smooth animation
        end

        % After robot put down, simulate brick movement to wall position
        vertices = get(brickMap((i-1)*3+j), 'Vertices');  % Get the current vertices of the brick
        translation = [xEnd, yEnd, zEnd] - [xStart, yStart, zStart];  % Calculate translation
        newVertices = vertices + translation;  % Apply translation to the vertices
        set(brickMap((i-1)*3+j), 'Vertices', newVertices);  % Update the brick's position by setting new vertices

    end
end

%% Point cloud 
% Used to calculate and plot the workspace radius and volume of the robot

stepRads = deg2rad(30); % Degree intervals which each join will be measure by
qlim = UR3e.model.qlim;

% dividing point cloud size to reduce the duration of the point cloud calculation
n = 2; % skip nth step to reduce the point cloud size

disp('Point cloud calculation: ')

pointCloudSize = prod(floor((((qlim(2:6,2)-qlim(2:6,1))/stepRads + 1)+(qlim(1,2)-qlim(1,1))/n)));
pointCloud = zeros(floor(pointCloudSize/n), 3); % Adjusting point cloud size to include the reduction
counter = 1;

tic
% Steps through the joint limits in increments of 'n' steps
for q1 = qlim(1,1):0.1:qlim(1,2) % First j
    for q2 = qlim(2,1):stepRads*n:qlim(2,2)
        for q3 = qlim(3,1):stepRads*n:qlim(3,2)
            for q4 = qlim(4,1):stepRads*n:qlim(4,2)
                for q5 = qlim(5,1):stepRads*n:qlim(5,2)
                    for q6 = qlim(6,1):stepRads*n:qlim(6,2)
                        q7 = 0;

                        % Assigns the q values (individual joints)
                        q = [q1,q2,q3,q4,q5,q6,q7];

                        % Calculate the forward kinematics
                        tr = UR3e.model.fkineUTS(q);

                        pointCloud(counter,:) = tr(1:3,4)';

                        % qAll(counter,:) = q;
                        counter = counter + 1;
                        if mod(counter/pointCloudSize * 100,1) == 0
                            display(['After ',num2str(toc),' seconds, completed ',num2str(counter/(pointCloudSize/(2*n)) * 100),'% of poses']);
                        end
                    end
                end
            end
        end
    end
end

toc
figure(1)
plot3(pointCloud(:,1),pointCloud(:,2),pointCloud(:,3),'r.');

% Creating the figure of the volume utilised by the robot 
figure(2)
[convexHull, volume] = convhull(pointCloud, 'Simplify',true);
convezHullPlot = trisurf(convexHull,pointCloud(:,1),pointCloud(:,2),pointCloud(:,3),'FaceColor','cyan');
fprintf('- \nVolume: \n%gm^3\n-\n', volume);

drawnow();

% Max range Calculations in X,Y,Z
Xmax = max(pointCloud(:,1)) - min(pointCloud(:,1));
Ymax = max(pointCloud(:,2)) - min(pointCloud(:,2));
Zmax = max(pointCloud(:,3)) - min(pointCloud(:,3));
fprintf(' - \nMax Range in X plane: %gm\nMax Range in Y plane: %gm\nMax Range in Z plane: %gm\n-\n', Xmax, Ymax, Zmax);

% Radius Calculations in X,Y,Z
Xrad = (abs((min(pointCloud(:,1))) + abs(max(pointCloud(:,1))))/2);
Yrad = (abs((min(pointCloud(:,2))) + abs(max(pointCloud(:,2))))/2);
Zrad = (abs((min(pointCloud(:,3))) + abs(max(pointCloud(:,3))))/2);
fprintf(' - \nRadius in X plane: %gm\nRadius in Y plane: %gm\nRadius in Z plane: %gm\n-\n', Xrad, Yrad, Zrad);
